spring.application.name=currency-exchange
server.port: 8000
# En este caso, con "optional" indicamos que la conexión con el servidor de configuraciones es opcional
# Es decir, si el servidor de configuraciones está levantado, este microservicio se conecta a él, pero si no lo está, no se conecta a él ejecutándose correctamente sin conflictos  
# (A partir de la versión 2.4.x de Spring Boot)Usando esta propiedad para importar datos del servidor de configuraciones, ya no es necesario crear el archivo bootstrap(properties o yaml)
# En este caso, como no se indica el host del servidor de configuraciones, por defecto intenta conectarse al host "http://localhost:8888"
spring.config.import=optional:configserver:
# Si el servidor de configuraciones se encuentra en otro host distinto a "http://localhost:8888", se debe indicar de esta manera
#spring.config.import=optional:configserver:http://localhost:8888
# Con esta propiedad indicamos a este microservicio la url o path donde en encuentra el servidor Eureka de Netflix para su registro
# Se puede omitir si tanto los microservicios que se van a registrar como el servidor se encuentran en la misma máquina y el servidor se ejecuta en el puerto por defecto 8761,pero normalmente siempre es mejor indicar esta propiedad
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb

# Esta propiedad es para que los inserts del archivo "data.sql" se hagan después de la creación de las tablas en la base de datos y no antes(A partir de la versión 2.5.x de Spring Boot)
spring.jpa.defer-datasource-initialization=true

# Creamos una configuración personalzada de reintentos llamada "sample-api" con 5 reintentos y 1 seg de espera para cada reintento
resilience4j.retry.instances.sample-api.max-attempts=5
resilience4j.retry.instances.sample-api.wait-duration=1s
# Con esta propiedad habilitada, hacemos que el tiempo de espera de cada reintento sea mayor que el anterior. Esto es debido a que dicho tiempo de espera se incrementa exponencialmente en cada reintento
resilience4j.retry.instances.sample-api.enable-exponential-backoff=true

# Sobrescribimos la configuración por defecto de "Rate Limiter" para establecer un número máximo de 3 llamadas en un periodo de 10 seg
resilience4j.ratelimiter.instances.default.limit-for-period=3
resilience4j.ratelimiter.instances.default.limit-refresh-period=10s

# Sobrescribimos la configuración por defecto de "Bulkhead" para establecer un número máximo de 10 llamadas concurrentes(hilos)
resilience4j.bulkhead.instances.default.max-concurrent-calls=10

# Propiedad para establecer la cantidad(0.1 - 10%, 1.0 - 100%) de trazas que Sleuth debe enviar al servidor Zipkin
# Se comenta porque ahora se configura programáticamente mediante un bean de Spring
#spring.sleuth.sampler.probability=1.0

# Esta propiedad es opcional y sirve para indicar la ruta o path donde se encuentra el servidor Zipkin
# Si no se establece, por defecto busca al servidor en la ruta "http://localhost:9411/"
#spring.zipkin.baseUrl=http://localhost:9411/
# Indicamos que use el broker de mensajería RabbitMQ en lugar del protocolo HTTP(valor por defecto)
spring.zipkin.sender.type=rabbit
